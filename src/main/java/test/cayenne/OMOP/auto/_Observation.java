package test.cayenne.OMOP.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import test.cayenne.OMOP.Concept;

/**
 * Class _Observation was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Observation extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String OBSERVATION_ID_PK_COLUMN = "observation_id";

    public static final Property<Long> OBSERVATION_CONCEPT_ID = Property.create("observationConceptId", Long.class);
    public static final Property<Long> OBSERVATION_ID = Property.create("observationId", Long.class);
    public static final Property<Concept> CONCEPT = Property.create("concept", Concept.class);

    protected Long observationConceptId;
    protected Long observationId;

    protected Object concept;

    public void setObservationConceptId(Long observationConceptId) {
        beforePropertyWrite("observationConceptId", this.observationConceptId, observationConceptId);
        this.observationConceptId = observationConceptId;
    }

    public Long getObservationConceptId() {
        beforePropertyRead("observationConceptId");
        return this.observationConceptId;
    }

    public void setObservationId(Long observationId) {
        beforePropertyWrite("observationId", this.observationId, observationId);
        this.observationId = observationId;
    }

    public Long getObservationId() {
        beforePropertyRead("observationId");
        return this.observationId;
    }

    public void setConcept(Concept concept) {
        setToOneTarget("concept", concept, true);
    }

    public Concept getConcept() {
        return (Concept)readProperty("concept");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "observationConceptId":
                return this.observationConceptId;
            case "observationId":
                return this.observationId;
            case "concept":
                return this.concept;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "observationConceptId":
                this.observationConceptId = (Long)val;
                break;
            case "observationId":
                this.observationId = (Long)val;
                break;
            case "concept":
                this.concept = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.observationConceptId);
        out.writeObject(this.observationId);
        out.writeObject(this.concept);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.observationConceptId = (Long)in.readObject();
        this.observationId = (Long)in.readObject();
        this.concept = in.readObject();
    }

}
